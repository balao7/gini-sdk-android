apply plugin: 'com.android.library'


android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.mcxiaoke.volley:library:1.0.0'
    compile 'com.parse.bolts:bolts-android:1.1.3'

    // Useful annotations.
    compile 'org.jetbrains:annotations:13.0'

    // Mocks for testing.
    androidTestCompile "org.mockito:mockito-core:1.10.0"
    androidTestCompile "com.google.dexmaker:dexmaker:1.1"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.1"
}

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompile
        appendix = variant.name
        from variant.javaCompile.destinationDir
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        destinationDir = file(buildDir.getPath() + "/docs-$variant.name/docs/")
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
	options.encoding = 'UTF-8'
    }
}

android.libraryVariants.all { variant ->
    task("build${variant.name.capitalize()}Zip", type: Zip) {
        description "Generates the zip with jar, license and docs for $variant.name"
        dependsOn "jar${variant.name.capitalize()}"
        dependsOn "generate${variant.name.capitalize()}Javadoc"

        baseName "ginisdk"
        appendix variant.name
        from files(buildDir, buildDir.getPath() + '/libs', buildDir.getPath() + "/docs-$variant.name/")
        include 'docs/**/*.html'
        include "ginisdk-${variant.name}.jar"
        include 'LICENSE'

        from rootDir
        include 'LICENSE'
    }

}
