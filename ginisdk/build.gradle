apply plugin: 'com.android.library'

configurations {
    upload
}

group = groupId
version = buildNumber == 'SNAPSHOT' ? "${baseVersion}-${buildNumber}" : "${baseVersion}.${buildNumber}"

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.mcxiaoke.volley:library:1.0.0'
    compile 'com.parse.bolts:bolts-android:1.1.3'

    // Useful annotations.
    compile 'org.jetbrains:annotations:13.0'

    // Mocks for testing.
    androidTestCompile "org.mockito:mockito-core:1.10.0"
    androidTestCompile "com.google.dexmaker:dexmaker:1.1"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.1"
}

apply from: file("repository.gradle")
def fullDocumentationDir(variant) {
    return "${buildDir.getPath()}/docs/java-docs-$variant.name/";
}


task createTestPropertyFile << {
    def propertyFile = new File("$projectDir/src/androidTest/assets/test.properties")
    if (!propertyFile.exists()) propertyFile.createNewFile()
    def props = new Properties()

    if (project.hasProperty('testClientId')) props['testClientId'] = testClientId
    if (project.hasProperty('testClientSecret')) props['testClientSecret'] = testClientSecret
    if (project.hasProperty('testApiUri')) props['testApiUri'] = testApiUri
    if (project.hasProperty('testUserCenterUri')) props['testUserCenterUri'] = testUserCenterUri

    propertyFile.withWriter("utf-8") {
        props.store(it, "test properties")
    }
}

task createIntegrationGuide(type: Exec) {
    commandLine './createIntegrationGuide.sh', "${project.projectDir}/src/doc"
}

assembleDebug.dependsOn.add(createTestPropertyFile)

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompile
        appendix = variant.name
        from variant.javaCompile.destinationDir
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        destinationDir = file(fullDocumentationDir(variant))
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
	    options.encoding = 'UTF-8'
    }
}

artifacts {
    upload file('build/outputs/aar/ginisdk-release.aar')
}

android.libraryVariants.all { variant ->
    task("build${variant.name.capitalize()}Zip", type: Zip) {
        description "Generates the zip with jar, license and docs for $variant.name"
        dependsOn "jar${variant.name.capitalize()}"
        dependsOn "generate${variant.name.capitalize()}Javadoc"

        baseName "ginisdk"
        version android.defaultConfig.versionName
        classifier variant.name
        from files(buildDir, buildDir.getPath() + '/libs')
        include("ginisdk-${variant.name}.jar")
        include 'LICENSE'
        rename("ginisdk-${variant.name}.jar", "ginisdk-${android.defaultConfig.versionName}.jar");

        from (fullDocumentationDir(variant)) {
            into "doc-" + android.defaultConfig.versionName;
            include "**/*.html"
            include "**/*.css"
            include "**/*.js"
        }

        from rootDir
        include 'LICENSE'
    }
}
